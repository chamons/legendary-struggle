namespace LS.Core
{
	[Inject]
	public interface IIdentifiable
	{
		long ID { get; }
	}

	[Inject]
	public interface ITimeable : IIdentifiable
	{
		int CT { get; }
	}

	[With]
	public struct Health
	{
		public int Current;
		public int Max;
	}

	[With]
	public class Character : ITimeable
	{
		public long ID { get; }

		public Health Health { get; }

		[Default ("0")]
		public int CT { get; }

		[Inject]
		public bool IsAlive => Health.Current > 0;
	}

	[With]
	public struct DelayedAction : ITimeable
	{
		public long ID { get; }

		public Action Action { get; }

		[Default ("0")]
		public int CT { get; }
	}

	[Inject]
	[Flags]
	public enum ActionType
	{
		None = 1 << 0,
		Damage = 1 << 1,
		Heal = 1 << 2,
	}

	public struct TargettingInfo
	{
		long InvokerID;
		long TargetID;
	}

	[With]
	public struct Action
	{
		string Name;
		TargettingInfo TargetInfo;
		ActionType Type;
		int Power;
	}

	interface IItemResolver {}

	[With]
	public class GameState 
	{
		long Tick;
		List<Character> Enemies;
		List<Character> Party;
		List<DelayedAction> DelayedActions;
		long ActivePlayerID;

		[Mutable]
		List<IItemResolver> ActiveResolvers;

		[Inject]
		public IEnumerable <Character> AllCharacters
		{
			get
			{
				foreach (Character e in Enemies)
					yield return e;
				foreach (Character p in Party)
					yield return p;
			}
		}

		[Inject]
		public IEnumerable <ITimeable> AllTimables
		{
			get
			{
				foreach (Character e in Enemies)
					yield return e;
				foreach (Character p in Party)
					yield return p;
				foreach (DelayedAction a in DelayedActions)
					yield return a;
			}
		}
	}
}
